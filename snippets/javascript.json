{
  "for循环": {
    "prefix": "for",
    "body": [
      "for (const ${2:item} of ${1:array}) {",
      "\t$0",
      "}"
    ],
    "description": "for循环"
  },
  "DataSet-import": {
    "prefix": "ds-import",
    "body": [
      "import { DataSet } from \"choerodon-ui/pro\";"
    ],
    "description": "从 choerodon-ui/pro 引入 DataSet"
  },
  "DataSet-new": {
    "prefix": "ds-new",
    "body": [
      "const ${1:dataSet} = new DataSet(${2:newDataSet})"
    ],
    "description": "新建 DataSet"
  },
  "DataSet-init": {
    "prefix": "ds-init",
    "body": [
      "{",
      "\tautoQuery: ${1|true,false|},",
      "\tautoCreate: ${2|true,false|},  ",
      "\tselection: '${3|'single','multiple',false}',",
      "\tpaging: ${4|false,true|},",
      "\tpageSize: ${5},",
      "\tfields: [",
      "\t\t$6",
      "\t],",
      "\ttransport: {",
      "\t\t$7",
      "\t},",
      "\tevents: {",
      "\t\t$0",
      "\t}",
      "}"
    ],
    "description": "初始化 DataSet 结构"
  },
  "DataSet-transport-create-obj": {
    "prefix": "transport-create-axios",
    "body": [
      "create: {",
      "\turl: '${1}', ",
      "\tmethod: '${2:post}'",
      "}"
    ],
    "description": "transport-create - 新建请求的 axios 配置或 url 字符串 - 返回 axios 对象"
  },
  "DataSet-transport-create-func": {
    "prefix": "transport-create-func",
    "body": [
      "create: ({ data, params, dataSet }) => ({",
      "\turl: '${1}',",
      "\tmethod: '${2:post}'",
      "})"
    ],
    "description": "transport-create - 新建请求的 axios 配置或 url 字符串 - 返回函数"
  },
  "DataSet-transport-read-obj": {
    "prefix": "transport-read-axios",
    "body": [
      "read: {",
      "\turl: '${1}',",
      "\tmethod: '${2:get}'",
      "}"
    ],
    "description": "transport-read - 查询请求的 axios 配置或 url 字符串 - 返回 axios 对象"
  },
  "DataSet-transport-read-func": {
    "prefix": "transport-read-func",
    "body": [
      "read: ({ data, params, dataSet }) => ({",
      "\turl: '${1}',",
      "\tmethod: '${2:get}'",
      "})"
    ],
    "description": "transport-read - 查询请求的 axios 配置或 url 字符串 - 返回函数"
  },
  "DataSet-transport-update-obj": {
    "prefix": "transport-update-axios",
    "body": [
      "update: {",
      "\turl: '${1}',",
      "\tmethod: '${2:put}'",
      "}"
    ],
    "description": "transport-update - 更新请求的 axios 配置或 url 字符串 - 返回 axios 对象"
  },
  "DataSet-transport-update-func": {
    "prefix": "transport-update-func",
    "body": [
      "update: ({ data, params, dataSet }) => ({",
      "\turl: '${1}',",
      "\tmethod: '${2:put}'",
      "})"
    ],
    "description": "transport-update - 更新请求的 axios 配置或 url 字符串 - 返回函数"
  },
  "DataSet-transport-destory-obj": {
    "prefix": "transport-destory-axios",
    "body": [
      "destory: {",
      "\turl: '${1}',",
      "\tmethod: '${2:delete}'",
      "}"
    ],
    "description": "transport-destory - 删除请求的 axios 配置或 url 字符串 - 返回 axios 对象"
  },
  "DataSet-transport-destory-func": {
    "prefix": "transport-destory-func",
    "body": [
      "destory: ({ data, params, dataSet }) => ({",
      "\turl: '${1}',",
      "\tmethod: '${2:delete}'",
      "})"
    ],
    "description": "transport-destory - 删除请求的 axios 配置或 url 字符串 - 返回函数"
  },
  "DataSet-transport-validate-obj": {
    "prefix": "transport-validate-axios",
    "body": [
      "validate: {",
      "\turl: '${1}',",
      "\tmethod: '${2:get}'",
      "}"
    ],
    "description": "transport-validate - 唯一性校验请求的 axios 配置或 url 字符串。当字段配了 unique 属性时，在当前数据集中没有重复数据的情况下，则会发起远程唯一性校验。校验的请求 data 格式为 { unique: [{fieldName1: fieldValue1,fieldName2: fieldValue2...}] }，响应格式为 boolean | boolean[]。 - 返回 axios 对象"
  },
  "DataSet-transport-validate-func": {
    "prefix": "transport-validate-func",
    "body": [
      "validate: ({ data, params, dataSet }) => ({",
      "\turl: '${1}',",
      "\tmethod: '${2:get}'",
      "})"
    ],
    "description": "transport-validate - 唯一性校验请求的 axios 配置或 url 字符串。当字段配了 unique 属性时，在当前数据集中没有重复数据的情况下，则会发起远程唯一性校验。校验的请求 data 格式为 { unique: [{fieldName1: fieldValue1,fieldName2: fieldValue2...}] }，响应格式为 boolean | boolean[]。 - 返回函数"
  },
  "DataSet-transport-submit-obj": {
    "prefix": "transport-submit-axios",
    "body": [
      "submit: {",
      "\turl: '${1}',",
      "\tmethod: '${2:post}'",
      "}"
    ],
    "description": "transport-submit - create, update, destroy 的默认配置或 url 字符串。 - 返回 axios 对象"
  },
  "DataSet-transport-submit-func": {
    "prefix": "transport-submit-func",
    "body": [
      "submit: ({ data, params, dataSet }) => ({",
      "\turl: '${1}',",
      "\tmethod: '${2:post}'",
      "})"
    ],
    "description": "transport-submit - create, update, destroy 的默认配置或 url 字符串。 - 返回函数"
  },
  "DataSet-transport-tls-obj": {
    "prefix": "transport-tls-axios",
    "body": [
      "tls: {",
      "\turl: '${1}',",
      "\tmethod: '${2:get}'",
      "}"
    ],
    "description": "transport-tls - 多语言数据请求的 axios 配置或 url 字符串。UI 接收的接口返回值格式为：[{ name: { zh_CN: '简体中文', en_US: '美式英语', ... }}]， 其中 name 是字段名。请使用全局配置 transport 的 tls 钩子统一处理。 - 返回 axios 对象"
  },
  "DataSet-transport-tls-func": {
    "prefix": "transport-tls-func",
    "body": [
      "tls: ({ data, params, dataSet, record, name }) => ({",
      "\turl: '${1}',",
      "\tmethod: '${2:get}'",
      "})"
    ],
    "description": "transport-tls - 多语言数据请求的 axios 配置或 url 字符串。UI 接收的接口返回值格式为：[{ name: { zh_CN: '简体中文', en_US: '美式英语', ... }}]， 其中 name 是字段名。请使用全局配置 transport 的 tls 钩子统一处理。 - 返回函数"
  },
  "DataSet-transport-exports-obj": {
    "prefix": "transport-exports-axios",
    "body": [
      "exports: {",
      "\turl: '${1}',",
      "\tmethod: '${2:post}'",
      "}"
    ],
    "description": "transport-exports - 导出的配置或 url 字符串 - 返回 axios 对象"
  },
  "DataSet-transport-exports-func": {
    "prefix": "transport-exports-func",
    "body": [
      "exports: ({ data, params, dataSet }) => ({",
      "\turl: '${1}',",
      "\tmethod: '${2:post}'",
      "})"
    ],
    "description": "transport-exports - 导出的配置或 url 字符串 - 返回函数"
  },
  "DataSet-field-init": {
    "prefix": "field-new",
    "body": [
      "{", 
      "\tname: '${1}',", 
      "\ttype: '${2|boolean,number,string,date,dateTime,time,week,month,year,email,url,intl,object|}',",  
      "\tlabel: '${3}',",
      "\ttextField: '${4}',",
      "\tvalueField: '${5}',",
      "\tdefaultValue: '${6}',",
      "\tdynamicProps: ({ dataSet, record, name}) => {",
      "\t\treturn $0;",
      "\t}",
      "}"
    ],
    "description": "新建一条 field"
  },
  "DataSet-field-lookupCode": {
    "prefix": "lookupCode",
    "body": [
      "lookupCode： ${0}"
    ],
    "description": "lookupCode - 值列表代码"
  },
  "DataSet-field-lookupUrl": {
    "prefix": "",
    "body": [
      "lookupUrl: ${0}"
    ],
    "description": "lookupUrl - 值列表请求地址"
  },
  "DataSet-event-Update": {
    "prefix": "event-update",
    "body": [
      "update: function({ dataSet, record, name, value, oldValue }) {",
      "\t$0",
      "}"
    ],
    "description": "update - 值更新事件"
  },
  "DataSet-event-query": {
    "prefix": "event-query",
    "body": [
      "query: function({ dataSet, params, data }) {",
      "\t$0",
      "}"
    ],
    "description": "query - 查询事件，返回值为 false 将阻止查询"
  },
  "DataSet-event-beforeLoad": {
    "prefix": "event-beforeLoad",
    "body": [
      "beforeLoad: function({ dataSet, data }) {",
      "\t$0",
      "}"
    ],
    "description": "beforeLoad - 数据加载前的事件，用于处理请求数据"
  },
  "DataSet-event-load": {
    "prefix": "event-load",
    "body": [
      "load: function({ dataSet }) {",
      "\t$0",
      "}"
    ],
    "description": "load - 数据加载完后的事件"
  },
  "DataSet-event-loadFailed": {
    "prefix": "event-loadFailed",
    "body": [
      "loadFailed: function({ dataSet }) {",
      "\t$0",
      "}"
    ],
    "description": "loadFailed - 数据加载失败后的事件"
  },
  "DataSet-event-submit": {
    "prefix": "event-submit",
    "body": [
      "submit: function({ dataSet, data }) {",
      "\t$0",
      "}"
    ],
    "description": "submit - 提交事件，返回值为 false 将阻止提交"
  },
  "DataSet-event-submitSuccess": {
    "prefix": "event-submitSuccess",
    "body": [
      "submitSuccess: function({ dataSet, data }) {",
      "\t$0",
      "}"
    ],
    "description": "submitSuccess - 提交成功事件"
  },
  "DataSet-event-submitFailed": {
    "prefix": "event-submitFailed",
    "body": [
      "submitFailed: function({ dataSet }) {",
      "\t$0",
      "}"
    ],
    "description": "submitFailed - 提交失败事件"
  },
  "DataSet-event-select": {
    "prefix": "event-selecet",
    "body": [
      "select: function({ dataSet, record, previous }) {",
      "\t$0",
      "}"
    ],
    "description": "select - 选择记录事件"
  },
  "DataSet-event-unSelect": {
    "prefix": "event-unSelect",
    "body": [
      "unSelect: function({ dataSet, record }) {",
      "\t$0",
      "}"
    ],
    "description": "unSelect - 撤销选择记录事件"
  },
  "DataSet-event-selectAll": {
    "prefix": "event-selectAll",
    "body": [
      "selectAll: function({ dataSet }) {",
      "\t$0",
      "}"
    ],
    "description": "selectAll - 全选记录事件"
  },
  "DataSet-event-unSelectAll": {
    "prefix": "event-unSelectAll",
    "body": [
      "unSelectAll: function({ dataSet }) {",
      "\t$0",
      "}"
    ],
    "description": "unSelectAll - 撤销全选记录事件"
  },
  "DataSet-event-indexChange": {
    "prefix": "event-indexChange",
    "body": [
      "indexChange: function({ dataSet, record, previous }) {",
      "\t$0",
      "}"
    ],
    "description": "indexChange - 当前记录变更事件"
  },
  "DataSet-event-fieldChange": {
    "prefix": "event-fieldChange",
    "body": [
      "fieldChange: function({ dataSet, record, name, propsName, value, oldValue }) {",
      "\t$0",
      "}"
    ],
    "description": "fieldChange - 字段属性变更事件"
  },
  "DataSet-event-create": {
    "prefix": "event-create",
    "body": [
      "create: function({ dataSet, record }) {",
      "\t$0",
      "}"
    ],
    "description": "create - 记录创建事件"
  },
  "DataSet-event-remove": {
    "prefix": "event-remove",
    "body": [
      "remove: function({ dataSet, recorevent }) {",
      "\t$0",
      "}"
    ],
    "description": "remove - 记录移除事件"
  },
  "DataSet-event-export": {
    "prefix": "event-export",
    "body": [
      "export: function({ dataSet, params, data }) {",
      "\t$0",
      "}"
    ],
    "description": "export - 导出事件，返回值为 false 将阻止导出"
  },
  "DataSet-event-beforeDelete": {
    "prefix": "event-beforeDelete",
    "body": [
      "beforeDelete: function({ dataSet, recorevent }) {",
      "\t$0",
      "}"
    ],
    "description": "beforeDelete - 数据删除前的事件， 返回值为 false 将阻止删除"
  },
  "DataSet-event-reset": {
    "prefix": "event-reset",
    "body": [
      "reset: function({ dataSet, recorevent }) {",
      "\t$0",
      "}"
    ],
    "description": "reset - 数据重置事件"
  }
}